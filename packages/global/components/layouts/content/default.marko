import { get, getAsArray } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import { shouldOverlay, restrictContentByReg, shouldTruncate } from "@parameter1/base-cms-marko-web-theme-monorail/utils/content-meter-helpers";

$ const {
  site,
  GAM,
  contentGatingHandler,
  contentAccessState,
  contentMeterState,
  req,
 } = out.global;

$ const { id, type, pageNode, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ contentAccessState.setFormDisplay({ req });
$ const { formId: idxFormId, displayForm: displayIdxForm, cookie: idxSuveyCookie } = contentAccessState;

$ const showOverlay = shouldOverlay(contentMeterState);

$ const showReadNextBlock = defaultValue(input.showReadNextBlock, true);
$ const showBottomAdBlock = defaultValue(input.showBottomAdBlock, true);
$ const showTopStoryBlock = defaultValue(input.showTopStoryBlock, false);
$ const displayPrimaryImage = ["media-gallery"].includes(type) ? false : true;
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayComments = false; // ["contact"].includes(type) ? false : true;
<!-- $ const displayNewsletterSignup = ["contact"].includes(type) ? false : true; -->
$ const displayNewsletterSignup = false;
$ const shouldInjectAds = GAM && GAM.enabled && ["article", "video", "news", "podcast", "press-release"].includes(type);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ aliases }| modifiers=["break-container", "first-sm"]>
    <if(GAM && GAM.enabled)>
      <theme-gam-define-display-ad
        name="leaderboard"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block", "combined-leaderboard"]
      />
    </if>
    <else>
      <mos-creative unit-ids="278" />
    </else>

  </@section>

  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header" role="region" aria-label="Content Information">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <marko-web-content-teaser block-name=blockName obj=content />
      <if(type !== "contact")>
        <if(authors.length === 1)>
          <theme-author-published-node author=authors[0] content=content />
        </if>
        <else-if(authors.length > 1)>
          <theme-content-attribution obj=content elements=["authors"] />
        </else-if>
      </if>
      <if(displayPublishedDate && authors.length !== 1)>
        <theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content />
        </theme-page-dates>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
    </div>
  </@section>

  <@section|{ aliases, content, authors }|>
    $ const { primarySection } = content;
    <div class="content-page-body" role="region" aria-label="Content Body">
      <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
        <if(content.embedCode)>
          <marko-web-content-embed-code block-name=blockName obj=content />
        </if>
        <else-if(type === "media-gallery")>
          <!-- <marko-web-image-slider images=images /> -->
        </else-if>
        <else-if(displayPrimaryImage)>
          $ let forceDisplay;
          $ if (type === "contact") forceDisplay = "left";
          $ if (type === "video") forceDisplay = "none";
          <theme-primary-image-block
            obj=content.primaryImage
            force-display=forceDisplay
          />
        </else-if>

        $ const requiresRegistration = contentGatingHandler({ content }) || restrictContentByReg(contentMeterState, contentGatingHandler, content);
        $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
        <marko-web-identity-x-access|context|
          enabled=requiresRegistration
          required-access-level-ids=accessLevels
        >
          $ const lazyloadFirstImage = displayPrimaryImage && content.primaryImage;
          <if(idxFormId)>
            <if(displayIdxForm)>
              $ const body = getContentPreview({ body: content.body, selector: "p:lt(3)" });
              <marko-web-content-body block-name=blockName obj={ body } />
              <div class="content-page-preview-overlay" />
              <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
                <marko-web-identity-x-context|{ hasUser, user, application }|>
                <if(hasUser)>
                  <marko-web-identity-x-form-access
                    content=content
                    user=user
                    formId=idxFormId
                    application=application
                  />
                </if>
                <else>
                  <marko-web-identity-x-non-auth-identify|{ user: identifiedUser }|>
                    <marko-web-identity-x-form-access
                      updateProfileOnSubmit=false
                      content=content
                      user=identifiedUser
                      formId=idxFormId
                      application=application
                    />
                  </marko-web-identity-x-non-auth-identify>
                </else>
              </marko-web-identity-x-context>
            </if>
            <else>
              $ const bodyId = `content-body-${content.id}`;
              <theme-body-with-injection
                content=content
                aliases=[]
                block-name=blockName
                selector=bodyId
                preventHTMLInjection=true
              />
            </else>
          </if>
          <else-if(shouldOverlay(contentMeterState))>
            $ const body = showOverlay ? getContentPreview({ body: content.body, selector: "p:lt(7)" }) : getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
            <marko-web-content-body block-name=blockName modifiers=bodyModifiers obj={ body } lazyload-first-image=lazyloadFirstImage />

            <div class="content-page-preview-overlay" />
            <if(!showOverlay)>
              <theme-content-page-gate
                can-access=context.canAccess
                is-logged-in=context.isLoggedIn
                has-required-access-level=context.hasRequiredAccessLevel
                requires-access-level=context.requiresAccessLevel
                requires-user-input=context.requiresUserInput
                messages=context.messages
                user-input-title="Step 2 of 2"
                profile-call-to-action=""
                profile-button-label="Create Account"
                profile-event-name="content_meter_profile"
              />
            </if>
          </else-if>
          <else-if(!context.canAccess || context.requiresUserInput)>
            $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
            <marko-web-content-body block-name=blockName obj={ body } />

            <div class="content-page-preview-overlay" />
            <theme-content-page-gate
              can-access=context.canAccess
              is-logged-in=context.isLoggedIn
              has-required-access-level=context.hasRequiredAccessLevel
              requires-access-level=context.requiresAccessLevel
              requires-user-input=context.requiresUserInput
              messages=context.messages
            />
          </else-if>
          <else>

            $ const isSponsored = getAsArray(content, "labels").includes("Sponsored");
            $ const bodyId = `content-body-${content.id}`;

            <content-body-with-injection
              content=content
              aliases=aliases
              block-name=blockName
              selector=bodyId
              preventHTMLInjection=!shouldInjectAds
            />

            <!-- needs input -->
            <if(input.afterBody)>
              <${input.afterBody}
                aliases=aliases
                block-name=blockName
                content=content
              />
            </if>

            $ const sidebars = getAsArray(content, "sidebars").map((sidebar) => sidebar.body);
            <marko-web-content-sidebars block-name=blockName obj={ sidebars } />

            <!-- Add Transcripts and allow for the ad injection -->
            <if(content.transcript)>
              $ const transcriptId = `content-transcript-${content.id}`;
              <div id=`transcript-${id}` class="page-contents__content-transcript">
                <marko-web-element block-name="page-contents" name="content-transcript-title">
                  <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                </marko-web-element>
                <content-body-with-injection
                  content={ body: content.transcript }
                  aliases=aliases
                  block-name=blockName
                  selector=transcriptId
                  preventHTMLInjection=!shouldInjectAds
                />
              </div>
            </if>
          </else>
        </marko-web-identity-x-access>

        <if(type === "document" || type === "whitepaper")>
          <theme-content-download obj=content>
            <@wufoo user-name=site.get("wufoo.userName") />
            <@link class="btn btn-primary" />
          </theme-content-download>
        </if>
        <if(type !== "contact")>
          <for|author| of=authors>
            <if(getAsArray(author, "labels").includes("Contributor"))>
              <marko-web-content-body obj=author block-name="inline-author-bio" />
            </if>
          </for>
        </if>
        <!-- remove this when reworking newsletter signup -->
        <if(displayNewsletterSignup)>
          <theme-newsletter-signup-banner-block />
        </if>

        <if(displaySocialShare)>
          <marko-web-social-sharing
            path=content.siteContext.path
            providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
            print-path=`/print/content/${content.id}`
          />
        </if>

        <if(displayComments)>
          <theme-identity-x-comment-stream content=content />
        </if>

        <if(displayReadNext)>
          <theme-read-next-block
            content-id=id
            section-id=primarySection.id
            published=content.published
          />
        </if>
      </theme-page-contents>
    </div>
  </@section>

  <if(showBottomAdBlock)>
    <@section|{ aliases }|>
      <if(GAM && GAM.enabled)>
        <theme-gam-define-display-ad
          name="rotation"
          position="content_page"
          aliases=aliases
          modifiers=["inter-block"]
        />
      </if>
      <else>
        <mos-creative unit-ids="278" />
      </else>
    </@section>
  </if>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      with-native-x=true
    />
  </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
